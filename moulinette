#!/usr/bin/env python3


import sys
import os
import subprocess


class Units:
    project_folder = ""
    project_file = ""
    unit_args = []
    unit_test = []
    unit_lol = []
    arguments_to_binary = []

    def __init__(self, filename):
        self.filename = filename
        fp = open(filename, "r")
        self.file = fp.read().split("\n")
        fp.close()

    def parse_file(self):
        self.project_folder = self.file[0].split("project_name=")[1]
        self.project_file = self.file[1].split("files=")[1]
        self.arguments_to_binary = self.file[2].split("arguments_to_binary=")[1].split(',')

        for i in range(0, len(self.file)):
            if self.file[i].find("args=") == 0 and self.file[i + 1] == "START":
                arg = self.file[i].split("args=")[1]
                self.unit_args.append(arg)
                i += 2
                output = ""
                unit_lol = []
                while self.file[i] != "END":
                    if self.file[i] == "#-#-#-#-#-#":
                        unit_lol.append(output)
                        output = ""
                    else:
                        output += self.file[i]
                    i += 1
                self.unit_test.append(unit_lol)


class Student:
    def __init__(self, folder):
        self.folder = folder
        self.mark = 0

    def open_folder(self):
        print(self.folder)

    def correction(self):
        print(self.folder)
        print("Final mark :", self.mark, "\n")


class Algo:
    file_path = ""

    def __init__(self, student, units, folder):
        self.student = student
        self.units = units
        self.folder = folder

    def start_units(self):
        if os.path.isdir(self.folder + "/" + self.units.project_folder):
            folders = os.listdir(self.folder + "/" + self.units.project_folder)
            self.file_path = self.folder + "/" + self.units.project_folder + "/" + self.units.project_file
            if os.path.isfile(self.file_path):
                for elem in folders:
                    if elem == self.units.project_file:
                        self.have_fun(elem)
            else:
                print("No such file:", self.units.project_file)
        else:
            print("No such directory:", self.units.project_folder)
            return

    def have_fun(self, elem):
        arglist = ""
        for args in self.units.arguments_to_binary:
            arglist += " " + args
        try:
            binary1 = "php " + "main.php " + self.file_path + arglist
            try:
                output1 = subprocess.Popen([binary1], stdout=subprocess.PIPE, shell=True).communicate()[0].decode(
                    'ascii').split('\n')

                for i in range(0, len(self.units.unit_test)):
                    found = False
                    for k in range(0, len(self.units.unit_test[i])):
                        for j in range(0, len(output1) - 1):
                            if self.units.unit_test[i][k] == output1[j] and not found:
                                found = True
                                self.student.mark += 1

            except subprocess.CalledProcessError:
                exit(84)
        except IOError:
            print("An error has occured during tests")
            exit(84)


# Core


def core():
    path = sys.argv[2]

    units = Units(sys.argv[1])
    units.parse_file()

    folders = os.listdir(path)
    for i in range(25, 26):
        student = Student(folders[i])
        print(folders[i])
        algo = Algo(student, units, "Rendu/" + folders[i])
        algo.start_units()
        print("Finale mark =>", student.mark, end="")
        print("/5")
        print("")


# Helper


def print_help():
    print("USAGE:", "\n")
    print("\t./moulinette file_responses.txt folder main.php", "\n")
    print("Made by web@cadémie Strasbourg ❤️")


if __name__ == '__main__':
    if len(sys.argv) == 4:
        core()
    else:
        print_help()

